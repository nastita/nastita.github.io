---
const menuItems = [
  { name: 'Home', href: '#home' },
  { name: 'About', href: '#about' },
  { name: 'Exp', href: '#work' },
  { name: 'Skills', href: '#skills' },
  { name: 'Kudos', href: '#testimonials' },
  { name: 'Contact', href: '#contact' },
];
---

<header
  id='header'
  class='fixed top-0 left-0 w-full z-[100] bg-base-100/50 backdrop-blur-sm'
>
  <!-- Navigation Menu Button -->
  <div class='fixed top-0 right-0 px-4 md:px-8 py-4 md:py-8'>
    <div id='nav-container' class='relative z-[110]'>
      <button
        id='menu-toggle'
        class='btn btn-primary uppercase gap-2 relative z-[120]'
        aria-label='Toggle navigation'
        aria-expanded='false'
      >
        <span>Menu</span>
        <span class='relative w-3 h-3 transition'>
          <svg
            width='100%'
            height='100%'
            viewBox='0 0 13 8'
            fill='none'
            xmlns='http://www.w3.org/2000/svg'
          >
            <path
              fill-rule='evenodd'
              clip-rule='evenodd'
              d='M6.22656 5.53077L1.24775 0.551957L0.188427 1.61128L5.6969 7.11975L6.22656 7.63948L6.75622 7.11975L12.2647 1.61128L11.2054 0.551956L6.22656 5.53077Z'
              fill='currentColor'></path>
          </svg>
        </span>
      </button>

      <!-- Navigation Overlay -->
      <div
        id='nav-overlay'
        class='absolute w-64 h-auto bg-neutral rounded-3xl -top-2 -right-2 shadow-lg z-[115] origin-top-right'
      >
        <nav
          id='nav-menu'
          class='menu menu-xl w-full gap-2 px-6 pt-20 pb-8 text-right'
        >
          {
            menuItems.map((item) => (
              <a
                href={item.href}
                class='menu-item uppercase text-3xl font-monument tracking-tight nav-link hover:text-primary text-neutral-content'
              >
                {item.name}
              </a>
            ))
          }
        </nav>
      </div>
    </div>
  </div>
</header>

<script>
  import gsap from 'gsap';
  import { ScrollTrigger } from 'gsap/ScrollTrigger';

  gsap.registerPlugin(ScrollTrigger);

  const header = document.getElementById('header');

  let lastScrollTop = 0;

  ScrollTrigger.create({
    id: 'header-scroll',
    start: 'top top',
    end: '+=9999',
    onUpdate: (self) => {
      const scrollTop =
        window.pageYOffset || document.documentElement.scrollTop;

      // Only trigger header animation if menu is closed
      if (!isMenuOpen) {
        if (scrollTop > lastScrollTop && scrollTop > 100) {
          // Scrolling down & past threshold
          gsap.to(header, {
            y: -100,
            duration: 0.3,
            ease: 'linear',
            overwrite: 'auto',
          });
        } else {
          // Scrolling up or at top
          gsap.to(header, {
            y: 0,
            duration: 0.3,
            ease: 'linear',
            overwrite: 'auto',
          });
        }
      }

      lastScrollTop = scrollTop;
    },
  });

  const menuToggle = document.getElementById('menu-toggle');
  const navOverlay = document.getElementById('nav-overlay');
  const navMenu = document.getElementById('nav-menu');
  const navLinks = document.querySelectorAll('.nav-link');

  if (!menuToggle || !navOverlay || !navMenu) {
    console.error('Required DOM elements not found');
    throw new Error('Required DOM elements not found');
  }

  const menuArrow = menuToggle.querySelector('svg');

  let isMenuOpen = false;

  // Overlay grows from top right (scaleX, scaleY from 0 to 1)
  gsap.set(navOverlay, {
    opacity: 0,
    pointerEvents: 'none',
    scaleX: 0,
    scaleY: 0,
    transformOrigin: 'top right',
  });

  // Menu items start hidden and collapsed vertically
  gsap.set(navLinks, {
    opacity: 0,
    scaleY: 0,
    transformOrigin: 'bottom',
  });

  let openTimeline: gsap.core.Timeline | null = null;
  const toggleMenu = () => {
    isMenuOpen = !isMenuOpen;
    menuToggle.setAttribute('aria-expanded', String(isMenuOpen));

    if (isMenuOpen) {
      // Open menu animation
      openTimeline = gsap
        .timeline()
        .to(
          menuArrow,
          {
            rotation: 180,
            duration: 0.3,
          },
          '<'
        )
        .to(
          navOverlay,
          {
            opacity: 1,
            scaleX: 1,
            scaleY: 1,
            pointerEvents: 'auto',
            duration: 0.25,
            ease: 'linear',
          },
          '<'
        )
        // Menu items reveal vertically from bottom to top, all at the same time
        .to(
          navLinks,
          {
            opacity: 1,
            scaleY: 1,
            duration: 0.25,
            ease: 'linear',
          },
          '>-0.02'
        );
    } else if (openTimeline) {
      openTimeline.reverse();
      // After reverse, set menuText back to 'Menu' for accessibility
      setTimeout(() => {}, 500);
    }
  };

  // Event Listeners
  menuToggle.addEventListener('click', toggleMenu);

  // Close menu when clicking outside
  document.addEventListener('click', (event) => {
    const target = event.target as Node;
    if (
      isMenuOpen &&
      !navMenu.contains(target) &&
      !menuToggle.contains(target)
    ) {
      toggleMenu();
    }
  });

  // Close menu on escape key
  document.addEventListener('keydown', (event) => {
    if (isMenuOpen && event.key === 'Escape') {
      toggleMenu();
    }
  });

  // Close menu on navigation
  navLinks.forEach((link) => {
    if (link.tagName === 'A') {
      link.addEventListener('click', () => {
        if (isMenuOpen) {
          toggleMenu();
        }
      });
    }
  });
</script>
